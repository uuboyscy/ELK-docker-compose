input {
	tcp {
		port => 5000
	}
}

## Add your filters / logstash plugins configuration here

output {
	elasticsearch {
		hosts => "elasticsearch:9200"
	}
}

###

input {  
    stdin {  
    }  
    jdbc {  
      jdbc_connection_string => "jdbc:mysql://uuboyscymysql.clrhltpp3icl.ap-northeast-1.rds.amazonaws.com/food"  
      jdbc_user => "food"  
      jdbc_password => "food"  
      jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-5.1.47-bin.jar"  
      jdbc_driver_class => "com.mysql.jdbc.Driver"
      codec => plain {charset => "UTF-8"}
      # record the last query or not, if true, save tracking_column to last_run_metadata_path
      record_last_run => "true"
      jdbc_paging_enabled => "true"  
      jdbc_page_size => "500000"  
#      statement => "select * from transaction order by datetime desc"
#      statement => "select orderID, productID, userID, productQTY ,date_add(datetime, interval -8 hour) datetime from transaction where datetime > :sql_last_value order by datetime desc"
      statement => "select orderID, userID, date_add(datetime, interval -8 hour) datetime from transaction where datetime > :sql_last_value group by datetime order by datetime desc"
      schedule => "*/1 * * * *"  
      type => "jdbc"
#      use_column_value => "false"
      tracking_column => "datetime"
      last_run_metadata_path => "/opt/logstash/conf/last_id"
#      clean_run => "false"
#      lowercase_column_names => "false"
    }  
}  
  
  
filter {  
    json {  
        source => "message"  
        remove_field => ["message"]  
    }
    mutate {
        gsub => [
            "datetime","th","",
            "datetime","st","",
            "datetime","rd",""
        ]
    }
    date {
        match => ["datetime", "yyyy-MM-dd HH:mm:ss"]
        target => "@timestamp"
        locale => "en"
    }
}  
  
  
output {  
    elasticsearch {  
        hosts => ["localhost:9200"]  
        index => "press"  
        document_id => "%{datetime}"
        document_type => "document"
    }  
    stdout {   
        codec => json_lines  
    }  
}  
